class Solution {

    public int search(int[] nums, int target) {

        //step1:基本case判断
        if(nums.length==0){
            return -1;
        }else if(nums.length==1){
            if(nums[0]==target){
                return 0;
            }else{
                return -1;
            }
        }

        //step2:使用二分查找
        int l=0;
        int r=nums.length-1;
        while(l<=r){

            int mid=(l+r)/2;

            //找到等于target的位置
            if(nums[mid]==target){return mid;}

            //只判断有序部分
            if(nums[l]<=nums[mid]){
                //左侧有序
                if(target>=nums[l]&&target<nums[mid]){
                    r=mid-1;
                }else{
                    l=mid+1;
                }
            }else{
                //右侧有序
                if(target>nums[mid]&&target<=nums[r]){
                    l=mid+1;
                }else{
                    r=mid-1;
                }
            }
            
        }

        return -1;

    }
}
//runtime:0 ms
//memory:39.9 MB
